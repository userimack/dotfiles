# function to go latest chnaged directory
function ol ()
{
    latest_dir=$(ls -tr | tail -1);
    echo "cding into $latest_dir";
    cd "$latest_dir"
}

function sudo(){
    \cat ~/.sudoers.lecture
    /usr/bin/sudo $@
}


# extract archives
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   echo tar xvjf $1   && tar xvjf $1     ;;
            *.tar.gz)    echo tar xvzf $1   && tar xvzf $1     ;;
            *.bz2)       echo bunzip2 $1    && bunzip2 $1      ;;
            *.rar)       echo unrar x $1    && unrar x $1      ;;
            *.gz)        echo gunzip $1     &&  gunzip $1      ;;
            *.tar)       echo tar xvf $1    &&  tar xvf $1   ;;
            *.tbz2)      echo tar xvjf $1   &&  tar xvjf $1  ;;
            *.tgz)       echo tar xvzf $1   && tar xvzf $1  ;;
            *.zip)       echo unzip $1   && unzip $1      ;;
            *.Z)         echo uncompress $1  &&  uncompress $1   ;;
            *.7z)        echo 7z x $1    && 7z x $1       ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# open up ~/.zshrc for editing, if present else ~/.bashrc
function zz() {
    if [ -f ${HOME}/.zshrc ]; then
        vim ${HOME}/.zshrc
    else
        vim ${HOME}/.bashrc
    fi
}


# open up ~/.config/nvim/init.vim for editing, or ~/.vimrc
function vv() {
    if [ -f ${HOME}/.config/nvim/init.vim ]; then
        vim ${HOME}/.config/nvim/init.vim
    else
        vim ${HOME}/.vimrc
    fi
}

function VCDOTFILES() {
    cd $HOME/dotfiles/
    echo "last commit - \\n------------------------------------------"
    git show --stat --oneline HEAD | tail
    # git log -1 | tail
    echo "------------------------------------------"

    if git diff-index --quiet HEAD --; then
        echo "Opps: No dotfiles changed"
    else
        echo "\n\nCreating a commit of all the dotfiles"
        git add -A && git commit -m "Backup Date: $(date)";
        echo "Yay!! Commit created successfully. Files changed:"

        echo "\\nNew commit - \\n------------------------------------------"
        git show --stat --oneline HEAD | tail
        echo "------------------------------------------"
    fi
}


function CLEANUP_DOCKER() {
    docker images | grep "none" | tr -s " " | cut -d " " -f 3 | uniq |  while read -r line; do echo -e "Removing > ${line}"; docker rmi -f ${line}; done
    echo  -e "-- CLEAN UP OF DOCKER IMAGES IS DONE --\n\n"

    docker images > /tmp/.docker_image_ids
    # docker container ls -a | tr -s " " | cut -d " " -f2 | while read -r id; do if [ grep ${id} /tmp/.docker_image_ids ];  echo "> ${id}"; done
    # docker container ls -a | tr -s " " | tail +2  | cut -d " " -f2 | while read -r id; do; if [ $(grep -c "${id}" /tmp/.docker_image_ids) -eq 0 ]; then echo "> Removing container - ${id}"; docker container rm "${id}"; fi; done
}


# Mac clean cache
function CLEAN_MAC() { sudo /bin/rm -rf /Users/mahendra/Library/Caches 2>/dev/null; echo "Done"; }


function MOST_USED_COMMANDS {
    history 0 $HISTSIZE | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}
